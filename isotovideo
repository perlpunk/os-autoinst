#!/usr/bin/perl -w
# Copyright © 2009-2013 Bernhard M. Wiedemann
# Copyright © 2012-2020 SUSE LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.
#

=head1 SYNOPSIS

isotovideo [OPTIONS] [TEST PARAMETER]

Parses command line parameters, vars.json and tests the given assets/ISOs.

=head1 OPTIONS

=over 4

=item B<-d, --debug>

Enable direct output to STDERR instead of autoinst-log.txt

=item B<-v, --version>

Show the current program version and test API version

=item B<-h, -?, --help>

Show this help.

=head1 TEST PARAMETER

All additional command line arguments specified in the C<key=value> format are
parsed as test parameters which take precedence over the settings in the
vars.json file. Lower case key names are transformed into upper case
automatically for convenience.

=cut

use strict;
use warnings;
use autodie ':all';
no autodie 'kill';

my $installprefix;    # $bmwqemu::scriptdir

BEGIN {
    # the following line is modified during make install
    $installprefix = undef;

    my ($wd) = $0 =~ m-(.*)/-;
    $wd            ||= '.';
    $installprefix ||= $wd;
    unshift @INC, "$installprefix";
}

use bmwqemu;
use testapi 'diag';
use File::Basename qw(dirname);
use Getopt::Long;
use POSIX qw(:sys_wait_h _exit);
Getopt::Long::Configure("no_ignore_case");
use OpenQA::Isotovideo::Interface;

use OpenQA::Isotovideo qw( $return_code );

OpenQA::Isotovideo::startup();

my %options;

sub usage {
    my ($usage_return_code) = @_;
    $return_code = $usage_return_code;
    eval { use Pod::Usage; pod2usage($return_code); };
    if ($@) {
        die "cannot display help, install perl(Pod::Usage)\n";
    }
}

sub _get_version_string {
    my $dirname     = dirname(__FILE__);
    my $thisversion = qx{git -C $dirname rev-parse HEAD};
    chomp $thisversion;
    die 'Could not parse version' unless $thisversion;
    return "Current version is $thisversion [interface v$OpenQA::Isotovideo::Interface::version]";
}

sub version {
    print _get_version_string() . "\n";
    exit 0;
}

my $fatal_error;      # the last error message catched by the die handler
# record the last die message
# note: It might *not* be a fatal error so we don't call bmwqemu::serialize_state here
#       immediately but only in the END block.
$SIG{__DIE__} = sub { $fatal_error = shift };

GetOptions(\%options, 'debug|d', 'help|h|?', 'version|v') or usage(1);
usage(0)  if $options{help};
version() if $options{version};

diag(_get_version_string());

# enable debug default when started from a tty
$bmwqemu::direct_output = $options{debug};

$bmwqemu::scriptdir = $installprefix;

OpenQA::Isotovideo::run(@ARGV);

# clear any previously recorded die message; it was not fatal after all if the execution came this far
$fatal_error = undef;

END {
    OpenQA::Isotovideo::_shutdown('test execution ended through exception');

    # in case of early exit, e.g. help display
    $return_code //= 0;

    bmwqemu::serialize_state(component => 'isotovideo', msg => $fatal_error) if $fatal_error;
    print "$$: EXIT $return_code\n";
    $? = $return_code;
}
